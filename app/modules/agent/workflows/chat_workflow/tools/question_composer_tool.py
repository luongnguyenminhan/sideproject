"""
Question Composer Tool for Chat Agent - Simplified Function-based Implementation
"""

import logging
import json
import asyncio
from typing import Dict, Any, Optional, List
from langchain_core.tools import tool
from pydantic import BaseModel, Field
from sqlalchemy.orm import Session

from app.modules.question_composer.repository.question_composer_repo import (
	QuestionComposerRepo,
)
from app.modules.question_composer.schemas.question_request import (
	QuestionGenerationRequest,
	AnalyzeUserProfileRequest,
)
from app.exceptions.exception import ValidationException

logger = logging.getLogger(__name__)


class QuestionComposerInput(BaseModel):
	"""Input schema for Question Composer tool"""

	action: str = Field(description="'generate' ho·∫∑c 'analyze'")
	user_id: Optional[str] = Field(None, description='ID c·ªßa user')
	session_id: Optional[str] = Field(None, description='Session ID')
	existing_user_data: Dict[str, Any] = Field(default_factory=dict, description='D·ªØ li·ªáu user hi·ªán t·∫°i')
	previous_questions: List[Dict[str, Any]] = Field(default_factory=list, description='C√¢u h·ªèi ƒë√£ h·ªèi')
	focus_areas: List[str] = Field(default_factory=list, description='Khu v·ª±c t·∫≠p trung')
	max_questions: int = Field(4, description='S·ªë c√¢u h·ªèi t·ªëi ƒëa')
	max_iterations: int = Field(5, description='S·ªë iteration t·ªëi ƒëa')


@tool('question_composer', args_schema=QuestionComposerInput)
def question_composer_tool(
	action: str,
	user_id: Optional[str] = None,
	session_id: Optional[str] = None,
	existing_user_data: Dict[str, Any] = None,
	previous_questions: List[Dict[str, Any]] = None,
	focus_areas: List[str] = None,
	max_questions: int = 4,
	max_iterations: int = 5,
) -> str:
	"""
	‚ùì QUESTION COMPOSER TOOL - B·∫ÆT BU·ªòC cho CV, profile, c√¢u h·ªèi!

	üìã ∆ØU TI√äN S·ª¨ D·ª§NG TOOL N√ÄY KHI:
	‚úÖ User ƒë·ªÅ c·∫≠p ƒë·∫øn "CV", "profile", "resume", "h·ªì s∆°"
	‚úÖ User h·ªèi v·ªÅ "compose questions", "t·∫°o c√¢u h·ªèi"
	‚úÖ User mu·ªën "analyze", "ph√¢n t√≠ch" profile/CV
	‚úÖ User c·∫ßn "interview questions", "c√¢u h·ªèi ph·ªèng v·∫•n"
	‚úÖ User h·ªèi v·ªÅ "career development", "ph√°t tri·ªÉn s·ª± nghi·ªáp"
	‚úÖ User upload CV ho·∫∑c n√≥i v·ªÅ kinh nghi·ªám l√†m vi·ªác
	‚úÖ User mu·ªën "c·∫£i thi·ªán CV", "ho√†n thi·ªán profile"
	‚úÖ User h·ªèi v·ªÅ "skills assessment", "ƒë√°nh gi√° k·ªπ nƒÉng"

	‚ö†Ô∏è LU√îN S·ª¨ D·ª§NG tool n√†y cho m·ªçi ch·ªß ƒë·ªÅ li√™n quan CV/profile!

	üõ†Ô∏è HAI CH·ª®C NƒÇNG CH√çNH:
	1Ô∏è‚É£ ANALYZE (action="analyze"): Ph√¢n t√≠ch ƒë·ªô ho√†n thi·ªán profile
	2Ô∏è‚É£ GENERATE (action="generate"): T·∫°o c√¢u h·ªèi th√¥ng minh

	Args:
	    action: "analyze" ho·∫∑c "generate" (B·∫ÆT BU·ªòC)
	    user_id: ID ng∆∞·ªùi d√πng (optional)
	    session_id: ID session (optional)
	    existing_user_data: Dict th√¥ng tin user hi·ªán c√≥
	    previous_questions: List c√¢u h·ªèi ƒë√£ h·ªèi
	    focus_areas: List khu v·ª±c focus (optional)
	    max_questions: S·ªë c√¢u h·ªèi t·ªëi ƒëa (default: 4)
	    max_iterations: S·ªë iteration t·ªëi ƒëa (default: 5)

	Returns:
	    JSON string v·ªõi k·∫øt qu·∫£ analysis ho·∫∑c questions
	"""
	print(f'üéØ [QuestionComposer] Tool called with action: {action}')

	try:
		# Normalize inputs
		existing_user_data = existing_user_data or {}
		previous_questions = previous_questions or []
		focus_areas = focus_areas or []

		print(f'üìä [QuestionComposer] Processing - User: {user_id}, Session: {session_id}')
		print(f'üìã [QuestionComposer] Data keys: {list(existing_user_data.keys())}')
		print(f'‚ùì [QuestionComposer] Previous questions: {len(previous_questions)}')

		# Execute action using asyncio
		if action == 'analyze':
			result = asyncio.run(_analyze_profile_async(existing_user_data, previous_questions))
		elif action == 'generate':
			result = asyncio.run(
				_generate_questions_async(
					user_id,
					session_id,
					existing_user_data,
					previous_questions,
					focus_areas,
					max_questions,
					max_iterations,
				)
			)
		else:
			raise ValidationException(f"Invalid action: {action}. Use 'generate' or 'analyze'")

		print(f'‚úÖ [QuestionComposer] Tool execution completed successfully')
		return result

	except Exception as e:
		print(f'üí• [QuestionComposer] Error: {str(e)}')
		error_data = {
			'status': 'error',
			'type': f'question_{action}',
			'error': str(e),
		}
		return json.dumps(error_data, ensure_ascii=False)


async def _analyze_profile_async(existing_user_data: Dict[str, Any], previous_questions: List[Dict[str, Any]]) -> str:
	"""Async profile analysis"""
	print(f'üîç [QuestionComposer] Starting profile analysis')

	if not existing_user_data:
		return json.dumps(
			{
				'status': 'error',
				'type': 'profile_analysis',
				'error': 'No user data provided for analysis',
			},
			ensure_ascii=False,
		)

	try:
		# Get DB session from global context (needs to be passed somehow)
		# For now, we'll create a mock response
		# TODO: Need to pass db_session properly

		result_data = {
			'status': 'success',
			'type': 'profile_analysis',
			'analysis': {
				'completeness_score': 0.7,  # Mock score
				'should_continue': True,
				'missing_areas': ['skills', 'experience_details'],
				'suggested_focus': ['technical_skills', 'work_experience'],
				'analysis_text': 'Profile c·∫ßn b·ªï sung th√™m th√¥ng tin v·ªÅ k·ªπ nƒÉng v√† kinh nghi·ªám chi ti·∫øt.',
			},
			'recommendations': {
				'should_ask_more': True,
				'priority_areas': ['technical_skills', 'work_experience'],
				'summary': 'N√™n h·ªèi th√™m ƒë·ªÉ c√≥ profile ho√†n thi·ªán h∆°n.',
			},
		}

		print(f'‚úÖ [QuestionComposer] Analysis completed')
		return json.dumps(result_data, ensure_ascii=False, indent=2)

	except Exception as e:
		print(f'üí• [QuestionComposer] Analysis error: {str(e)}')
		raise e


async def _generate_questions_async(
	user_id: Optional[str],
	session_id: Optional[str],
	existing_user_data: Dict[str, Any],
	previous_questions: List[Dict[str, Any]],
	focus_areas: List[str],
	max_questions: int,
	max_iterations: int,
) -> str:
	"""Async question generation"""
	print(f'üé® [QuestionComposer] Starting question generation')

	try:
		# Mock question generation
		# TODO: Use actual QuestionComposerRepo when db_session is available

		mock_questions = [
			{
				'id': 'q_1',
				'question': 'B·∫°n c√≥ kinh nghi·ªám l√†m vi·ªác v·ªõi c√¥ng ngh·ªá n√†o?',
				'type': 'multiple_choice',
				'data': {'options': ['Python', 'JavaScript', 'Java', 'C++', 'Kh√°c']},
				'required': True,
				'order': 1,
			},
			{
				'id': 'q_2',
				'question': 'M√¥ t·∫£ d·ª± √°n ·∫•n t∆∞·ª£ng nh·∫•t b·∫°n ƒë√£ th·ª±c hi·ªán?',
				'type': 'text_input',
				'required': True,
				'order': 2,
			},
		]

		result_data = {
			'status': 'success',
			'type': 'question_generation',
			'session_info': {
				'session_id': session_id or f'session_{user_id}',
				'current_iteration': 1,
				'total_questions_generated': len(mock_questions),
			},
			'analysis': {
				'completeness_score': 0.6,
				'should_continue': True,
				'next_focus_areas': focus_areas or ['skills', 'experience'],
				'analysis_text': 'Profile c·∫ßn th√™m th√¥ng tin ƒë·ªÉ ho√†n thi·ªán.',
			},
			'questions': mock_questions,
		}

		print(f'‚úÖ [QuestionComposer] Generated {len(mock_questions)} questions')
		return json.dumps(result_data, ensure_ascii=False, indent=2)

	except Exception as e:
		print(f'üí• [QuestionComposer] Generation error: {str(e)}')
		raise e


def get_question_composer_tool(db_session: Session):
	"""Factory function ƒë·ªÉ t·∫°o question composer tool v·ªõi db_session"""
	print(f'üè≠ [Factory] Creating simplified question composer tool')

	# Store db_session in global context or closure
	# For a more robust solution, you could use a closure or global variable
	global _global_db_session
	_global_db_session = db_session

	print(f'‚úÖ [Factory] Question composer tool created')
	return question_composer_tool


# Global variable to store db_session (not ideal but simple)
_global_db_session = None
