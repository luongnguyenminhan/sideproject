"""
System Prompts for EnterViu AI Assistant Workflow
Contains all system prompts used throughout the workflow
"""

from typing import List
from pydantic import BaseModel, Field


# Tool Decision Schema
class ToolDecision(BaseModel):
	"""Schema for tool usage decision"""

	decision: str = Field(description="Quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng tool: 'use_tools' ho·∫∑c 'no_tools'")
	reasoning: str = Field(description='L√Ω do cho quy·∫øt ƒë·ªãnh n√†y')
	confidence: float = Field(description='ƒê·ªô tin c·∫≠y c·ªßa quy·∫øt ƒë·ªãnh (0.0-1.0)')
	tools_needed: List[str] = Field(default=[], description='Danh s√°ch tools c·∫ßn thi·∫øt (n·∫øu c√≥)')


DEFAULT_SYSTEM_PROMPT = """B·∫°n l√† EnterViu AI Assistant - Tr·ª£ l√Ω th√¥ng minh h·ªó tr·ª£ t·∫°o CV v√† ph√°t tri·ªÉn s·ª± nghi·ªáp.

VAI TR√í C·ª¶A B·∫†N:
- H·ªó tr·ª£ t·∫°o CV chuy√™n nghi·ªáp
- T∆∞ v·∫•n v·ªÅ k·ªπ nƒÉng, kinh nghi·ªám c·∫ßn c√≥ cho t·ª´ng v·ªã tr√≠
- Ph√¢n t√≠ch CV v√† ƒë∆∞a ra g√≥p √Ω c·∫£i thi·ªán
- T·∫°o c√¢u h·ªèi kh·∫£o s√°t ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ ·ª©ng vi√™n
- T∆∞ v·∫•n chi·∫øn l∆∞·ª£c t√¨m vi·ªác v√† ph√°t tri·ªÉn s·ª± nghi·ªáp

C√îNG C·ª§ H·ªñ TR·ª¢:
1. üîç RAG Search Tool - T√¨m ki·∫øm th√¥ng tin t·ª´ CV v√† t√†i li·ªáu ƒë√£ upload
2. üìã Survey Generator Tool - T·∫°o kh·∫£o s√°t c√° nh√¢n h√≥a cho ·ª©ng vi√™n

Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o kh·∫£o s√°t, c√¢u h·ªèi, ho·∫∑c ph√¢n t√≠ch CV, h√£y s·ª≠ d·ª•ng tools ph√π h·ª£p.

NGUY√äN T·∫ÆC L√ÄM VI·ªÜC:
- Lu√¥n th√¢n thi·ªán, chuy√™n nghi·ªáp v√† nhi·ªát t√¨nh
- ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø v√† c√≥ th·ªÉ √°p d·ª•ng ƒë∆∞·ª£c
- T√¥n tr·ªçng th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng
- Khuy·∫øn kh√≠ch v√† ƒë·ªông vi√™n ng∆∞·ªùi d√πng
- S·ª≠ d·ª•ng tools ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ch√≠nh x√°c v√† c√° nh√¢n h√≥a"""

TOOL_DECISION_SYSTEM_PROMPT = """B·∫°n l√† Tool Decision Agent - Chuy√™n gia quy·∫øt ƒë·ªãnh vi·ªác s·ª≠ d·ª•ng c√¥ng c·ª• cho EnterViu AI Assistant.

NHI·ªÜM V·ª§: Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† quy·∫øt ƒë·ªãnh c√≥ c·∫ßn s·ª≠ d·ª•ng tools hay kh√¥ng.

C√îNG C·ª§ C√ì S·∫¥N:
1. üìã generate_survey_questions - T·∫°o c√¢u h·ªèi kh·∫£o s√°t c√° nh√¢n h√≥a
2. üîç rag_search - T√¨m ki·∫øm th√¥ng tin t·ª´ CV/t√†i li·ªáu

QUY·∫æT ƒê·ªäNH "use_tools" KHI:
- Ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o survey, kh·∫£o s√°t, c√¢u h·ªèi, assessment
- C·∫ßn t√¨m ki·∫øm th√¥ng tin t·ª´ CV, resume, profile, h·ªì s∆°
- Y√™u c·∫ßu ph√¢n t√≠ch, t∆∞ v·∫•n v·ªÅ career, job, s·ª± nghi·ªáp
- B·∫•t k·ª≥ y√™u c·∫ßu n√†o c√≥ th·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi tools

QUY·∫æT ƒê·ªäNH "no_tools" KHI:
- Ch·ªâ ch√†o h·ªèi ƒë∆°n gi·∫£n: "xin ch√†o", "hello"
- Ch·ªâ c·∫£m ∆°n: "c·∫£m ∆°n", "thank you"
- Ch·ªâ t·∫°m bi·ªát: "t·∫°m bi·ªát", "goodbye"

Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON v·ªõi decision, reasoning, confidence, v√† tools_needed."""

# Survey detection keywords - simplified
SURVEY_KEYWORDS = ['survey', 'kh·∫£o s√°t', 'c√¢u h·ªèi', 'questions', 'assessment', 'ƒë√°nh gi√°']


def has_survey_keywords(message: str, keywords: list = None) -> bool:
	"""Check if message contains survey-related keywords"""
	if keywords is None:
		keywords = SURVEY_KEYWORDS
	return any(keyword.lower() in message.lower() for keyword in keywords)


def get_matched_keywords(message: str, keywords: list = None) -> list:
	"""Get list of matched survey keywords from message"""
	if keywords is None:
		keywords = SURVEY_KEYWORDS
	return [keyword for keyword in keywords if keyword.lower() in message.lower()]


def build_enhanced_system_prompt(
	base_prompt: str,
	business_process_type: str = None,
	triggered_rules: list = None,
	combined_context: str = None,
	force_tools: bool = False,
) -> str:
	"""Build enhanced system prompt with business context"""
	enhanced_prompt = base_prompt

	# Add business process context
	if business_process_type:
		process_context = f'\n\nBUSINESS PROCESS: {business_process_type}'
		if triggered_rules:
			process_context += f'\nActive Rules: {", ".join(triggered_rules)}'
		enhanced_prompt += process_context

	# Add RAG context if available
	if combined_context:
		enhanced_prompt += f'\n\nKNOWLEDGE CONTEXT:\n{combined_context[:1000]}\n'

	return enhanced_prompt


def build_tool_decision_prompt(
	user_message: str,
	business_process_type: str = 'general_conversation',
	required_tools: list = None,
	triggered_rules: list = None,
	tool_names: list = None,
	context: str = '',
) -> str:
	"""Build enhanced decision prompt with business context"""
	if required_tools is None:
		required_tools = []
	if triggered_rules is None:
		triggered_rules = []
	if tool_names is None:
		tool_names = []

	decision_prompt = f"""
Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng: "{user_message}"

Quy tr√¨nh nghi·ªáp v·ª•: {business_process_type}
{f'C√¥ng c·ª• b·∫Øt bu·ªôc: {", ".join(required_tools)}' if required_tools else ''}
{f'Quy t·∫Øc ƒë√£ k√≠ch ho·∫°t: {", ".join(triggered_rules)}' if triggered_rules else ''}

T·∫•t c·∫£ c√¥ng c·ª• c√≥ s·∫µn: {', '.join(tool_names)}

Context hi·ªán t·∫°i: {context[:200] if context else 'Kh√¥ng c√≥ context'}...

D·ª±a tr√™n quy tr√¨nh nghi·ªáp v·ª• v√† y√™u c·∫ßu ng∆∞·ªùi d√πng, h√£y quy·∫øt ƒë·ªãnh c√≥ c·∫ßn s·ª≠ d·ª•ng tools hay kh√¥ng.
"""
	return decision_prompt
