"""
Migration script ƒë·ªÉ chuy·ªÉn messages t·ª´ MongoDB sang MySQL
Ch·∫°y script n√†y n·∫øu b·∫°n c√≥ d·ªØ li·ªáu c≈© trong MongoDB c·∫ßn migrate

Usage:
    python scripts/migrate_mongodb_to_mysql.py
"""

import sys
import os
from datetime import datetime
from sqlalchemy.orm import Session

# Add app directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.core.database import get_db
from app.modules.chat.dal.message_dal import MessageDAL
from app.modules.chat.models.message import Message, MessageRole


def migrate_mongodb_messages_to_mysql():
    """
    Migrate messages t·ª´ MongoDB sang MySQL
    
    L∆∞u √Ω: Script n√†y gi·∫£ ƒë·ªãnh b·∫°n c√≥ MongoDB service running
    v√† c√≥ d·ªØ li·ªáu c·∫ßn migrate. C·∫≠p nh·∫≠t logic theo c·∫•u tr√∫c
    MongoDB hi·ªán t·∫°i c·ªßa b·∫°n.
    """
    print("üöÄ Starting MongoDB to MySQL migration...")
    
    # TODO: Import MongoDB client c·ªßa b·∫°n
    # from your_mongodb_service import mongodb_client
    
    db_session = next(get_db())
    message_dal = MessageDAL(db_session)
    
    try:
        # TODO: Thay th·∫ø logic n√†y b·∫±ng c√°ch l·∫•y d·ªØ li·ªáu t·ª´ MongoDB th·ª±c t·∫ø
        print("üì• Fetching messages from MongoDB...")
        
        # V√≠ d·ª• mock data - thay th·∫ø b·∫±ng logic th·∫≠t
        mongodb_messages = [
            # {
            #     'message_id': 'uuid-here',
            #     'conversation_id': 'conv-uuid',
            #     'user_id': 'user-uuid',
            #     'role': 'user',
            #     'content': 'Hello world',
            #     'timestamp': datetime.utcnow(),
            #     'model_used': 'gpt-3.5-turbo',
            #     'tokens_used': '{"total": 100}',
            #     'response_time_ms': '1500'
            # }
        ]
        
        migrated_count = 0
        
        for mongo_message in mongodb_messages:
            try:
                # Ki·ªÉm tra xem message ƒë√£ t·ªìn t·∫°i trong MySQL ch∆∞a
                existing_message = message_dal.get_by_id(mongo_message['message_id'])
                if existing_message:
                    print(f"‚è≠Ô∏è Message {mongo_message['message_id']} already exists, skipping...")
                    continue
                
                # T·∫°o message data cho MySQL
                message_data = {
                    'id': mongo_message['message_id'],
                    'conversation_id': mongo_message['conversation_id'],
                    'user_id': mongo_message['user_id'],
                    'role': MessageRole(mongo_message['role']),
                    'content': mongo_message['content'],
                    'timestamp': mongo_message['timestamp'],
                    'model_used': mongo_message.get('model_used'),
                    'tokens_used': mongo_message.get('tokens_used'),
                    'response_time_ms': mongo_message.get('response_time_ms'),
                }
                
                # L∆∞u v√†o MySQL
                message_dal.create(message_data)
                migrated_count += 1
                
                if migrated_count % 100 == 0:
                    print(f"‚úÖ Migrated {migrated_count} messages...")
                    
            except Exception as e:
                print(f"‚ùå Error migrating message {mongo_message.get('message_id', 'unknown')}: {e}")
                continue
        
        # Commit transaction
        db_session.commit()
        print(f"üéâ Migration completed! Migrated {migrated_count} messages from MongoDB to MySQL")
        
    except Exception as e:
        print(f"üí• Migration failed: {e}")
        db_session.rollback()
        raise
    finally:
        db_session.close()


if __name__ == "__main__":
    # C·∫£nh b√°o
    response = input("‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën migrate d·ªØ li·ªáu t·ª´ MongoDB sang MySQL? (y/N): ")
    if response.lower() != 'y':
        print("üö´ Migration cancelled.")
        sys.exit(0)
    
    migrate_mongodb_messages_to_mysql() 